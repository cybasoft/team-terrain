name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: teamterrain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install backend dependencies
        run: bun install
        working-directory: ./backend

      - name: Create test environment file
        run: |
          cat > backend/.env << EOF
          NODE_ENV=test
          PORT=3001
          DB_HOST=localhost
          DB_PORT=5432
          DB_NAME=teamterrain_test
          DB_USER=postgres
          DB_PASSWORD=postgres
          JWT_SECRET=test-jwt-secret-key
          API_AUTH_TOKEN=test-api-auth-token
          ADMIN_EMAILS=admin@test.com
          CORS_ORIGIN=http://localhost:8080
          EOF

      - name: Run database migrations
        run: bun run db:migrate
        working-directory: ./backend

      - name: Run backend tests
        run: bun test
        working-directory: ./backend

  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install frontend dependencies
        run: bun install
        working-directory: ./frontend

      - name: Create test environment file
        run: |
          cat > frontend/.env << EOF
          VITE_NODE_ENV=test
          VITE_MAPBOX_ACCESS_TOKEN=pk.test-token
          VITE_API_BASE_URL=http://localhost:3001/api
          VITE_API_AUTH_TOKEN=test-api-auth-token
          VITE_LOGIN_ENDPOINT=/auth/login
          VITE_USERS_ENDPOINT=/users
          VITE_LOCATION_TRACKER_ENDPOINT=/location/update
          VITE_APP_NAME=TeamTerrain
          VITE_DEBUG_MODE=false
          VITE_ADMIN_EMAILS=admin@test.com
          EOF

      - name: Lint frontend code
        run: bun run lint
        working-directory: ./frontend

      - name: Build frontend
        run: bun run build
        working-directory: ./frontend

      - name: Run frontend tests
        run: bun test
        working-directory: ./frontend
        continue-on-error: true # Until tests are implemented

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-test:
    runs-on: ubuntu-latest
    name: Docker Build Test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: teamterrain:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          # Create test environment files
          cp backend/.env.example backend/.env
          cp frontend/.env.example frontend/.env
          
          # Test docker-compose build
          docker-compose -f docker-compose.dev.yml build
          
          # Quick smoke test
          docker-compose -f docker-compose.dev.yml up -d
          sleep 30
          
          # Test if services are responding
          curl -f http://localhost:8080 || exit 1
          curl -f http://localhost:3001/health || exit 1
          
          # Cleanup
          docker-compose -f docker-compose.dev.yml down
